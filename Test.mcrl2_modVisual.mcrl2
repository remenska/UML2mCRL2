
%====== MONITOR PART GENERATED ==============
% Original formula:[true*. Q . (! ( P || R ))*. R ] false
% ============================
% Modified formula:([true+][Q]([(! (P||R))+][R]false && [R]false )&& [Q]([(! (P||R))+][R]false && [R]false ))
% ============================
act error ;
sort Action = struct action_3
 | action_2
 | action_1;

act action_3;
act action_2;
act action_1;

sort ActionFormula = struct action(act1:Action)
| and(phi1:ActionFormula,phi2:ActionFormula) 
| or(phi1:ActionFormula,phi2:ActionFormula)  
| not(ActionFormula) 
| True 
| False ; 

map satisfy: Action # ActionFormula -> Bool;
var c1,c2:Action;
f,g:ActionFormula;
eqn
	 satisfy(c1,action(c2)) = (c1 == c2) ;	 satisfy(c1,and(f,g)) = satisfy(c1,f) && satisfy(c1,g);
	 satisfy(c1,not(f)) = !satisfy(c1,f);
	 satisfy(c1,or(f,g)) = satisfy(c1,f) || satisfy(c1,g);
	 satisfy(c1,True) = true;
	 satisfy(c1,False) = false;

proc Monitor = Mon_"([true+][Q]([(!(P||R))+][R]false&&[R]false)&&[Q]([(!(P||R))+][R]false&&[R]false))"; 

proc Mon_"([true+][Q]([(!(P||R))+][R]false&&[R]false)&&[Q]([(!(P||R))+][R]false&&[R]false))" = Mon_"[true+][Q]([(!(P||R))+][R]false&&[R]false)&&[Q]([(!(P||R))+][R]false&&[R]false)";  % just removing backets

proc Mon_"[true+][Q]([(!(P||R))+][R]false&&[R]false)&&[Q]([(!(P||R))+][R]false&&[R]false)" = Mon_"[true+][Q]([(!(P||R))+][R]false&&[R]false)" + Mon_"[Q]([(!(P||R))+][R]false&&[R]false)";

proc Mon_"[true+][Q]([(!(P||R))+][R]false&&[R]false)" = Mon_"true+" . Mon_"[Q]([(!(P||R))+][R]false&&[R]false)";

proc Mon_"true+" = Mon_"true". Mon_"true+" + Mon_"true";

proc Mon_"true" = (satisfy(action_3, True)) -> action_3
 + (satisfy(action_2, True)) -> action_2
 + (satisfy(action_1, True)) -> action_1
;

proc Mon_"[Q]([(!(P||R))+][R]false&&[R]false)" = Mon_"Q" . Mon_"([(!(P||R))+][R]false&&[R]false)";

proc Mon_"Q" = (satisfy(action_3, action(Q))) -> action_3
 + (satisfy(action_2, action(Q))) -> action_2
 + (satisfy(action_1, action(Q))) -> action_1
;

proc Mon_"([(!(P||R))+][R]false&&[R]false)" = Mon_"[(!(P||R))+][R]false&&[R]false";  % just removing backets

proc Mon_"[(!(P||R))+][R]false&&[R]false" = Mon_"[(!(P||R))+][R]false" + Mon_"[R]false";

proc Mon_"[(!(P||R))+][R]false" = Mon_"(!(P||R))+" . Mon_"[R]false";

proc Mon_"(!(P||R))+" = Mon_"(!(P||R))". Mon_"(!(P||R))+" + Mon_"(!(P||R))";

proc Mon_"(!(P||R))" = Mon_"!(P||R)";% just removing backets

proc Mon_"!(P||R)" = (satisfy(action_3, not(or(action(P) , action(R))))) -> action_3
 + (satisfy(action_2, not(or(action(P) , action(R))))) -> action_2
 + (satisfy(action_1, not(or(action(P) , action(R))))) -> action_1
;

proc Mon_"[R]false" = Mon_"R" . Mon_"false";

proc Mon_"R" = (satisfy(action_3, action(R))) -> action_3
 + (satisfy(action_2, action(R))) -> action_2
 + (satisfy(action_1, action(R))) -> action_1
;

proc Mon_"false" = error;

init Monitor;