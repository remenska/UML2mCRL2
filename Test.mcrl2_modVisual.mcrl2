
%====== MONITOR PART GENERATED ==============
% Original formula:[(!R )*. P . (! ( S || R ))*. R ] false
% ============================
% Modified formula:([(! R)+][P]([(! (S||R))+][R]false && [R]false )&& [P]([(! (S||R))+][R]false && [R]false ))
% ============================
act error ;
sort Action = struct T
 | S
 | R
 | Q
 | P;

act T;
act S;
act R;
act Q;
act P;

sort ActionFormula = struct action(act1:Action)
| and(phi1:ActionFormula,phi2:ActionFormula) 
| or(phi1:ActionFormula,phi2:ActionFormula)  
| not(ActionFormula) 
| True 
| False ; 

map satisfy: Action # ActionFormula -> Bool;
var c1,c2:Action;
f,g:ActionFormula;
eqn
	 satisfy(c1,action(c2)) = (c1 == c2) ;	 satisfy(c1,and(f,g)) = satisfy(c1,f) && satisfy(c1,g);
	 satisfy(c1,not(f)) = !satisfy(c1,f);
	 satisfy(c1,or(f,g)) = satisfy(c1,f) || satisfy(c1,g);
	 satisfy(c1,True) = true;
	 satisfy(c1,False) = false;

proc Monitor = Mon_1;

proc Mon_1 = Mon_2;% just removing backets

proc Mon_2 = Mon_3 + Mon_4;

proc Mon_3 = Mon_5 . Mon_4;

proc Mon_5 = Mon_6. Mon_5 + Mon_6;

proc Mon_6 = Mon_7;% just removing backets

proc Mon_7 = (satisfy(T, not(action(R)))) -> T
 + (satisfy(S, not(action(R)))) -> S
 + (satisfy(R, not(action(R)))) -> R
 + (satisfy(Q, not(action(R)))) -> Q
 + (satisfy(P, not(action(R)))) -> P
;

proc Mon_4 = Mon_8 . Mon_9;

proc Mon_8 = (satisfy(T, action(P))) -> T
 + (satisfy(S, action(P))) -> S
 + (satisfy(R, action(P))) -> R
 + (satisfy(Q, action(P))) -> Q
 + (satisfy(P, action(P))) -> P
;

proc Mon_9 = Mon_10;% just removing backets

proc Mon_10 = Mon_11 + Mon_12;

proc Mon_11 = Mon_13 . Mon_12;

proc Mon_13 = Mon_14. Mon_13 + Mon_14;

proc Mon_14 = Mon_15;% just removing backets

proc Mon_15 = (satisfy(T, not(or(action(S) , action(R))))) -> T
 + (satisfy(S, not(or(action(S) , action(R))))) -> S
 + (satisfy(R, not(or(action(S) , action(R))))) -> R
 + (satisfy(Q, not(or(action(S) , action(R))))) -> Q
 + (satisfy(P, not(or(action(S) , action(R))))) -> P
;

proc Mon_12 = Mon_18 . Mon_19;

proc Mon_18 = (satisfy(T, action(R))) -> T
 + (satisfy(S, action(R))) -> S
 + (satisfy(R, action(R))) -> R
 + (satisfy(Q, action(R))) -> Q
 + (satisfy(P, action(R))) -> P
;

proc Mon_19 = error;

init Monitor;