
%====== MONITOR PART GENERATED ==============
% Original formula:[true*. Q . (! ( P || R ))*. R ] false
% ============================
% Modified formula:([true+][Q]([(! (P||R))+][R]false && [R]false )&& [Q]([(! (P||R))+][R]false && [R]false ))
% ============================
act error ;
sort Action = struct R
 | Q
 | P;

act R;
act Q;
act P;

sort ActionFormula = struct action(act1:Action)
| and(phi1:ActionFormula,phi2:ActionFormula) 
| or(phi1:ActionFormula,phi2:ActionFormula)  
| not(ActionFormula) 
| True 
| False ; 

map satisfy: Action # ActionFormula -> Bool;
var c1,c2:Action;
f,g:ActionFormula;
eqn
	 satisfy(c1,action(c2)) = (c1 == c2) ;	 satisfy(c1,and(f,g)) = satisfy(c1,f) && satisfy(c1,g);
	 satisfy(c1,not(f)) = !satisfy(c1,f);
	 satisfy(c1,or(f,g)) = satisfy(c1,f) || satisfy(c1,g);
	 satisfy(c1,True) = true;
	 satisfy(c1,False) = false;

proc Monitor = Mon_1;

proc Mon_1 = Mon_2;% just removing backets

proc Mon_2 = Mon_3 + Mon_4;

proc Mon_3 = Mon_5 . Mon_4;

proc Mon_5 = Mon_6. Mon_5 + Mon_6;

proc Mon_6 = (satisfy(R, True)) -> R
 + (satisfy(Q, True)) -> Q
 + (satisfy(P, True)) -> P
;

proc Mon_4 = Mon_7 . Mon_8;

proc Mon_7 = (satisfy(R, action(Q))) -> R
 + (satisfy(Q, action(Q))) -> Q
 + (satisfy(P, action(Q))) -> P
;

proc Mon_8 = Mon_9;% just removing backets

proc Mon_9 = Mon_10 + Mon_11;

proc Mon_10 = Mon_12 . Mon_11;

proc Mon_12 = Mon_13. Mon_12 + Mon_13;

proc Mon_13 = Mon_14;% just removing backets

proc Mon_14 = (satisfy(R, not(or(action(P) , action(R))))) -> R
 + (satisfy(Q, not(or(action(P) , action(R))))) -> Q
 + (satisfy(P, not(or(action(P) , action(R))))) -> P
;

proc Mon_11 = Mon_17 . Mon_18;

proc Mon_17 = (satisfy(R, action(R))) -> R
 + (satisfy(Q, action(R))) -> Q
 + (satisfy(P, action(R))) -> P
;

proc Mon_18 = error;

init Monitor;