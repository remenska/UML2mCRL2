act P,Q,R,S,T;
% P must be followed by S before R happens
proc TestMe = P.Q.R;



% created: 2014-08-13 10:39:57.224

%====== MONITOR PART GENERATED ==============
% Original formula:[(! ready)*][coin]false
% ============================
% Modified formula:([(! ready)+][coin]false && [coin]false )
% ============================
act error ;
sort Action = struct T_mon
 | S_mon
 | R_mon
 | Q_mon
 | P_mon;

act T_mon,T_found;
act S_mon,S_found;
act R_mon,R_found;
act Q_mon,Q_found;
act P_mon,P_found;

sort ActionFormula = struct action(act1:Action)
| and(phi1:ActionFormula,phi2:ActionFormula) 
| or(phi1:ActionFormula,phi2:ActionFormula)  
| not(ActionFormula) 
| True 
| False ; 

map satisfy: Action # ActionFormula -> Bool;
var c1,c2:Action;
f,g:ActionFormula;
eqn
	 satisfy(c1,action(c2)) = (c1 == c2) ;	 satisfy(c1,and(f,g)) = satisfy(c1,f) && satisfy(c1,g);
	 satisfy(c1,not(f)) = !satisfy(c1,f);
	 satisfy(c1,or(f,g)) = satisfy(c1,f) || satisfy(c1,g);
	 satisfy(c1,True) = true;
	 satisfy(c1,False) = false;

proc Monitor = Mon_1;

proc Mon_1 = Mon_2;% just removing backets

proc Mon_2 = Mon_3 + Mon_4;

proc Mon_3 = Mon_5 . Mon_4;

proc Mon_5 = Mon_6. Mon_5 + Mon_6;

proc Mon_6 = Mon_7;% just removing backets

proc Mon_7 = (satisfy(T_mon, not(action(ready_mon)))) -> T_mon
 + (satisfy(S_mon, not(action(ready_mon)))) -> S_mon
 + (satisfy(R_mon, not(action(ready_mon)))) -> R_mon
 + (satisfy(Q_mon, not(action(ready_mon)))) -> Q_mon
 + (satisfy(P_mon, not(action(ready_mon)))) -> P_mon
;

proc Mon_4 = Mon_8 . Mon_9;

proc Mon_8 = (satisfy(T_mon, action(coin_mon))) -> T_mon
 + (satisfy(S_mon, action(coin_mon))) -> S_mon
 + (satisfy(R_mon, action(coin_mon))) -> R_mon
 + (satisfy(Q_mon, action(coin_mon))) -> Q_mon
 + (satisfy(P_mon, action(coin_mon))) -> P_mon
;

proc Mon_9 = error;

init allow({error,T_found,
S_found,
R_found,
Q_found,
P_found}, 
 comm({	 T | T_mon -> T_found
,
	 S | S_mon -> S_found
,
	 R | R_mon -> R_found
,
	 Q | Q_mon -> Q_found
,
	 P | P_mon -> P_found

},
 Monitor  || TestMe));