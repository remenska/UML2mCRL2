act P,Q,R,S,T, internal;
% P must be followed by S before R happens
proc Aman = P.internal.Q.R;



%====== MONITOR PART GENERATED ==============
% Original formula:([(! R)+][P]([(! (S||R))+][R]false && [R]false )&& [P]([(! (S||R))+][R]false && [R]false ))
% ============================
% Modified formula:([(! R)+][P]([(! (S||R))+][R]false && [R]false )&& [P]([(! (S||R))+][R]false && [R]false ))
% ============================
act error ;
sort Action = struct internal_mon
 | T_mon
 | S_mon
 | R_mon
 | Q_mon
 | P_mon;

act internal_mon,internal_found;
act T_mon,T_found;
act S_mon,S_found;
act R_mon,R_found;
act Q_mon,Q_found;
act P_mon,P_found;

sort ActionFormula = struct action(act1:Action)
| and(phi1:ActionFormula,phi2:ActionFormula) 
| or(phi1:ActionFormula,phi2:ActionFormula)  
| not(ActionFormula) 
| True 
| False ; 

map satisfy: Action # ActionFormula -> Bool;
var c1,c2:Action;
f,g:ActionFormula;
eqn
	 satisfy(c1,action(c2)) = (c1 == c2) ;	 satisfy(c1,and(f,g)) = satisfy(c1,f) && satisfy(c1,g);
	 satisfy(c1,not(f)) = !satisfy(c1,f);
	 satisfy(c1,or(f,g)) = satisfy(c1,f) || satisfy(c1,g);
	 satisfy(c1,True) = true;
	 satisfy(c1,False) = false;

proc Monitor = Mon_1;

proc Mon_1 = Mon_2;% just removing backets

proc Mon_2 = Mon_3 + Mon_4;

proc Mon_3 = Mon_5 . Mon_4;

proc Mon_5 = Mon_6. Mon_5 + Mon_6;

proc Mon_6 = Mon_7;% just removing backets

proc Mon_7 = (satisfy(internal_mon, not(action(R_mon)))) -> internal_mon
 + (satisfy(T_mon, not(action(R_mon)))) -> T_mon
 + (satisfy(S_mon, not(action(R_mon)))) -> S_mon
 + (satisfy(R_mon, not(action(R_mon)))) -> R_mon
 + (satisfy(Q_mon, not(action(R_mon)))) -> Q_mon
 + (satisfy(P_mon, not(action(R_mon)))) -> P_mon
;

proc Mon_4 = Mon_8 . Mon_9;

proc Mon_8 = (satisfy(internal_mon, action(P_mon))) -> internal_mon
 + (satisfy(T_mon, action(P_mon))) -> T_mon
 + (satisfy(S_mon, action(P_mon))) -> S_mon
 + (satisfy(R_mon, action(P_mon))) -> R_mon
 + (satisfy(Q_mon, action(P_mon))) -> Q_mon
 + (satisfy(P_mon, action(P_mon))) -> P_mon
;

proc Mon_9 = Mon_10;% just removing backets

proc Mon_10 = Mon_11 + Mon_12;

proc Mon_11 = Mon_13 . Mon_12;

proc Mon_13 = Mon_14. Mon_13 + Mon_14;

proc Mon_14 = Mon_15;% just removing backets

proc Mon_15 = (satisfy(internal_mon, not(or(action(S_mon) , action(R_mon))))) -> internal_mon
 + (satisfy(T_mon, not(or(action(S_mon) , action(R_mon))))) -> T_mon
 + (satisfy(S_mon, not(or(action(S_mon) , action(R_mon))))) -> S_mon
 + (satisfy(R_mon, not(or(action(S_mon) , action(R_mon))))) -> R_mon
 + (satisfy(Q_mon, not(or(action(S_mon) , action(R_mon))))) -> Q_mon
 + (satisfy(P_mon, not(or(action(S_mon) , action(R_mon))))) -> P_mon
;

proc Mon_12 = Mon_18 . Mon_19;

proc Mon_18 = (satisfy(internal_mon, action(R_mon))) -> internal_mon
 + (satisfy(T_mon, action(R_mon))) -> T_mon
 + (satisfy(S_mon, action(R_mon))) -> S_mon
 + (satisfy(R_mon, action(R_mon))) -> R_mon
 + (satisfy(Q_mon, action(R_mon))) -> Q_mon
 + (satisfy(P_mon, action(R_mon))) -> P_mon
;

proc Mon_19 = error;

init allow({error,internal_found,
T_found,
S_found,
R_found,
Q_found,
P_found}, 
 comm({	 internal | internal_mon -> internal_found
,
	 T | T_mon -> T_found
,
	 S | S_mon -> S_found
,
	 R | R_mon -> R_found
,
	 Q | Q_mon -> Q_found
,
	 P | P_mon -> P_found

},
 Monitor  || Aman));